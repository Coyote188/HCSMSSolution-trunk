==========================================================================
    Visual Studio Team System：创作和运行测试的概述        
==========================================================================

此概述描述在 Visual Studio Team System 和 Visual Studio Team Edition for Software Testers 中创作和运行测试的特点。

打开测试
-------------
若要打开一个测试，请打开一个测试项目或包含测试定义的测试元数据文件（带有 .vsmdi 扩展名的文件）。您可以在解决方案资源管理器中查找测试项目和元数据文件。

查看测试
-------------
若要查看哪些测试是可用的，请打开“测试视图”窗口。或者，如果您已安装 Team Edition for Software Testers，则也可以通过打开“测试列表编辑器”窗口来查看测试。

若要打开“测试视图”窗口，请单击“测试”菜单，指向“窗口”，然后单击“测试视图”。若要打开“测试列表编辑器”窗口（如果已安装 Team Edition for Software Testers），请单击“测试”，指向“窗口”，然后单击“测试列表编辑器”。

运行测试
-------------
您可以从“测试视图”窗口和“测试列表编辑器”窗口中运行测试。请参见“查看测试”部分以了解如何打开这些窗口。若要运行“测试视图”窗口中显示的一个或多个测试，应首先在该窗口中选择相应的测试；若要选择多个测试，请在按住 Shift 或 Ctrl 键的同时单击相应的测试。然后在“测试视图”窗口工具栏中单击“运行测试”按钮。

如果已安装 Visual Studio Team Edition for Software Testers，则也可以使用“测试列表编辑器”窗口来运行测试。若要在测试列表编辑器中运行测试，请选中您要运行的每个测试旁边的复选框。然后在“测试列表编辑器”窗口的工具栏中单击“运行测试”按钮。

查看测试结果
--------------------
当您运行一个测试或一系列测试时，测试的结果将在“测试结果”窗口中显示。运行中的每一个测试都在一个单独的行上显示，这样您就可以查看其状态。该窗口包含一个位于窗口上半部的嵌入式状态栏，此状态栏提供了整个测试运行摘要的详细信息。

若要查看特定测试结果的更多详细结果，请在“测试结果”窗口中双击它。这将打开一个窗口，其中提供有关特定测试结果的更多信息，例如由测试返回的任何特定错误消息。

更改测试的运行方式
-----------------------------------
每次当您运行一个或多个测试时，都会使用一个设置集合来确定如何运行那些测试。这些设置都包含在一个“测试运行配置”文件中。

此处是您可以对测试运行配置文件进行的更改的不完全列表：

 - 更改每个测试运行的命名方案。
 - 更改为实现远程运行测试而在运行测试时使用的测试控制器。
 - 收集所测试代码的代码覆盖率数据，以便您可以查看测试覆盖了哪些代码行。
 - 启用和禁用测试部署。
 - 指定在测试运行前要进行部署的附加文件。
 - 选择一个不同的宿主 ASP.NET 来运行 ASP.NET 单元测试。
 - 选择一个不同的宿主（即智能设备测试宿主）来运行智能设备单元测试。
 - 为运行测试的测试代理设置各种属性。
 - 在每个测试运行的开始和结束的时候运行自定义脚本，以便您在每次运行测试时都能够按要求准确地设置测试环境。
 - 为测试和测试运行设置时间限制。
 - 设置浏览器组合和在测试运行中重复 Web 测试的次数。

默认情况下，只要创建一个新的测试项目，就会创建一个测试运行配置文件。可以通过以下方式更改此文件：在解决方案资源管理器中双击它，然后更改文件中的设置。（测试运行配置文件的扩展名为 .testrunconfig。）

一个解决方案可以包含多个测试运行配置文件。在那些文件中，只有一个“活动”测试运行配置文件将用来确定当前用于测试运行的设置。通过单击“测试”菜单上的“选择活动测试运行配置”可以选择活动测试运行配置。

-------------------------------------------------------------------------------

测试类型
----------
通过使用 Visual Studio Team Edition for Software Testers，可以创建许多不同的测试类型：

单元测试：使用单元测试可以创建用 C++、Visual C# 或 Visual Basic 编写的、演练源代码的编程测试。单元测试可调用类的方法，传递合适的参数，并验证返回值是否为所期望的值。
单元测试有三种专用变体：
 - 当您将单元测试配置为针对数据源的每一行反复调用时，将创建数据驱动的单元测试。每一行中的数据都将由单元测试用作输入数据。
 - ASP.NET 单元测试是演练 ASP.NET Web 应用程序中的代码的单元测试。智能设备单元测试是部署到智能设备或仿真程序然后由智能设备测试宿主执行的单元测试。

Web 测试：Web 测试是由一系列有序的 HTTP 请求组成的，这些请求是使用 Microsoft Internet Explorer 在一个浏览器会话中记录下来的。您可以获得有关它所请求的页或站点的测试报告特定详细信息，例如某个特定页是否包含指定字符串。

负载测试：使用负载测试封装非手动测试，例如单元测试、Web 测试和一般测试，然后通过使用虚拟用户同时运行它们。在负载下运行这些测试将生成测试结果，包括用表格和图形方式显示的性能计数器或其他计数器。

一般测试：一般测试是经过包装后在 Visual Studio 中用作测试的现有程序。下面是一些可以将其变成一般测试的测试或程序的例子：
 - 使用进程退出代码来通知测试是通过还是失败的现有测试。0 表示测试通过，而任何其他值则表示测试失败。
 - 在测试方案期间用来获得特定功能的一般程序。
 - 使用特殊的 XML 文件（称为“摘要结果文件”）来通报详细结果的测试或程序。

手动测试：当测试任务将由测试工程师（而非使用自动脚本）完成时，使用手动测试类型。

顺序测试：使用顺序测试可按照您指定的顺序来执行一组测试。

-------------------------------------------------------------------------------

